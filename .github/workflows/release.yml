name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libc6-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libasound2-dev pkg-config
      - name: Build
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: build --clean --single-target
        env:
          CGO_ENABLED: '1'
      - name: Set build vars
        run: |
          echo "GOOS=$(go env GOOS)" >> "$GITHUB_ENV"
          echo "GOARCH=$(go env GOARCH)" >> "$GITHUB_ENV"
      - name: Package artifacts
        shell: bash
        run: |
          for dir in dist/*/; do
            base="$(basename "${dir%/}")"
            zip_name="${base}-${GOOS}-${GOARCH}.zip"
            if command -v zip >/dev/null; then
              (cd "$dir" && zip -r "../$zip_name" .)
            else
              (cd "$dir" && 7z a -tzip "../$zip_name" .)
            fi
          done
          find dist -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} +
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ env.GOOS }}-${{ env.GOARCH }}
          path: dist/*.zip
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Ensure Release Exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" -t "$TAG" -n ""
          fi
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
